

# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'desinge.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

import sys
import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
import re
from sklearn.multioutput import ClassifierChain
from sklearn.dummy import DummyClassifier

import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import cross_val_score
import pickle

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        # MainWindow.setWindowFlags(QtCore.Qt.FramelessWindowHint)
        # MainWindow.setAttribute(QtCore.Qt.WA_TranslucentBackground)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(70, 50, 631, 471))
        self.widget.setObjectName("widget")
        self.windows = QtWidgets.QLabel(self.widget)
        self.windows.setGeometry(QtCore.QRect(0, 0, 631, 471))
        font = QtGui.QFont()
        font.setPointSize(5)
        font.setStrikeOut(False)
        self.windows.setFont(font)
        self.windows.setToolTipDuration(1)
        self.windows.setStyleSheet("background-color: rgb(49, 115, 237);\n"
                                    "border-radius: 20px;")
        self.windows.setText("")
        self.windows.setWordWrap(True)
        self.windows.setObjectName("windows")
        self.sub_windows = QtWidgets.QLabel(self.widget)
        self.sub_windows.setGeometry(QtCore.QRect(320, 0, 311, 471))
        self.sub_windows.setStyleSheet("background-color: rgb(250, 250, 250);\n"
                                        "border-top-right-radius : 18px;\n"
                                        "border-bottom-right-radius : 18px")
        self.sub_windows.setText("")
        self.sub_windows.setObjectName("sub_windows")
        self.label_text_3 = QtWidgets.QPlainTextEdit(self.widget)
        self.label_text_3.setEnabled(False)
        self.label_text_3.setGeometry(QtCore.QRect(10, 100, 301, 41))
        font = QtGui.QFont()
        font.setFamily("Kristen ITC")
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.label_text_3.setFont(font)
        self.label_text_3.setAccessibleDescription("")
        self.label_text_3.setStyleSheet("\n"
                                        "background-color: rgb(49, 115, 237);\n"
                                        "color: rgb(255, 255, 255);")
        self.label_text_3.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.label_text_3.setFrameShadow(QtWidgets.QFrame.Plain)
        self.label_text_3.setLineWidth(0)
        self.label_text_3.setTextInteractionFlags(QtCore.Qt.NoTextInteraction)
        self.label_text_3.setBackgroundVisible(False)
        self.label_text_3.setObjectName("label_text_3")



        self.output = QtWidgets.QLabel(self.widget)
        self.output.setGeometry(QtCore.QRect(30, 170, 271, 221))
        self.output.setStyleSheet("image: url(./icons/Frame 1.svg);"
                                  "color: rgb(49, 115, 237);")
        font = QtGui.QFont()
        font.setFamily("Segoe UI Semibold")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.output.setFont(font)
        self.output.setText("")
        self.output.setFrameShadow(QtWidgets.QFrame.Raised)
        self.output.setWordWrap(True);

        self.output.setAutoFillBackground(True)
        self.output.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.output.setObjectName("output")



        self.input_text = QtWidgets.QTextEdit(self.widget)
        self.input_text.setGeometry(QtCore.QRect(340, 170, 271, 141))
        font = QtGui.QFont()
        font.setFamily("Segoe UI Semibold")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.input_text.setFont(font)
        self.input_text.viewport().setProperty("cursor", QtGui.QCursor(QtCore.Qt.IBeamCursor))
        self.input_text.setAutoFillBackground(True)
        self.input_text.setStyleSheet("image: url(./icons/Rectangle 3.svg);\n"
                                        "color: rgb(255, 255, 255);\n"
                                        "border-image: url(./icons/Rectangle 3.svg);")
        self.input_text.setFrameShape(QtWidgets.QFrame.VLine)
        self.input_text.setFrameShadow(QtWidgets.QFrame.Raised)
        self.input_text.setLineWidth(27)
        self.input_text.setMidLineWidth(16)
        self.input_text.setTabChangesFocus(True)
        self.input_text.setObjectName("input_text")



        self.Button_analysis = QtWidgets.QPushButton(self.widget)
        self.Button_analysis.setGeometry(QtCore.QRect(410, 340, 131, 51))
        font = QtGui.QFont()
        font.setFamily("Kristen ITC")
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        font.setKerning(True)




        self.Button_analysis.setFont(font)
        self.Button_analysis.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Button_analysis.setToolTip("")
        self.Button_analysis.setStyleSheet("QPushButton\n"
                                                "{\n"
                                                "color: rgb(255, 255, 255);\n"
                                                "border: 0px;\n"
                                                "selection-background-color: rgb(255, 255, 255);\n"
                                                "alternate-background-color: rgb(255, 255, 255);\n"
                                                "gridline-color: rgb(255, 255, 255);\n"
                                                "selection-color: rgb(255, 255, 255);\n"
                                                "border-color: rgb(255, 255, 255);\n"
                                                "image: url(./icons/Rectangle 4.svg);\n"
                                                "image: url(./icons/Rectangle 4.svg);\n"
                                                "}\n"
                                                "QPushButton::hover\n"
                                                "{\n"
                                                "border: 0px;\n"
                                                "image: url(./icons/Rectangle 5.svg);\n"
                                                "}")
        self.Button_analysis.setObjectName("Button_analysis")



        self.label_text_2 = QtWidgets.QLabel(self.widget)
        self.label_text_2.setGeometry(QtCore.QRect(350, 110, 251, 21))
        font = QtGui.QFont()
        font.setFamily("Kristen ITC")
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.label_text_2.setFont(font)
        self.label_text_2.setStyleSheet("color: rgb(49, 115, 237);")
        self.label_text_2.setObjectName("label_text_2")



        self.Button_exit = QtWidgets.QPushButton(self.widget)
        self.Button_exit.setGeometry(QtCore.QRect(600, 10, 21, 21))
        self.Button_exit.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Button_exit.setMouseTracking(True)
        self.Button_exit.setStyleSheet("QPushButton\n"
                                        "{\n"
                                        "background-image: url(./icons/X icone.svg);\n"
                                        "border-image: url(./icons/X icone.svg);\n"
                                        "}\n"
                                        "QPushButton::hover\n"
                                        "{\n"
                                        "    border-image: url(./icons/X icone_hover.svg);\n"
                                        "\n"
                                        "}\n"
                                        "")
        self.Button_exit.setText("")
        self.Button_exit.setObjectName("Button_exit")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)


        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.Button_analysis.clicked.connect(self.get_reslat)
        self.Button_exit.clicked.connect(self.exits)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_text_3.setPlainText(_translate("MainWindow", "    Welcome to Our Applcaiton "))
        self.Button_analysis.setText(_translate("MainWindow", "Analyis "))
        self.label_text_2.setText(_translate("MainWindow", "Type Your Comment Here"))


    def get_reslat(self):
        input=self.input_text.toPlainText()
        prediedted=[]
        resulst=[]

        coment_tran = word_vectorizer.transform([input])

        commet_final = pd.DataFrame(coment_tran.toarray(),
                                    columns=word_vectorizer.get_feature_names_out())
        prediedted.append(model_toxic.predict(commet_final)[0])
        prediedted.append(model_severe_toxic.predict(commet_final)[0])
        prediedted.append(model_insult.predict(commet_final)[0])
        prediedted.append(model_threat.predict(commet_final)[0])
        prediedted.append(model_obscene.predict(commet_final)[0])
        prediedted.append(model_identity_hate.predict(commet_final)[0])

        flag=0
        for index, i in enumerate(prediedted):

            if (i==1and index==0):
              flag=1
              resulst.append('this comment has a: Toxicity')
            if(i==1 and index==1):
                resulst.append(',Severe toxic\n')
            if (i == 1 and index == 2):
                resulst.append(',Insult\n')
            if (i == 1 and index == 3):
                resulst.append(',Threat  ')
            if (i == 1 and index == 4):
                resulst.append(',Obscene  ')
            if (i == 1 and index == 5):
                resulst.append(',Identity_hate \n')
            if(i == 0 and flag==0):
               resulst.append('your comment clear form any toxicity\n')
               break;

        resulst=' '.join(str(x) for x in resulst)

        self.output.setText(str(resulst))

    def exits(self):
        sys.exit()
def clean_text(text):
    # Remove HTML tags
    text = re.sub(r'<[^>]+>', '', text)

    # Remove web links
    text = re.sub(r'http\S+|www\S+|https\S+', '', text)

    # Remove special characters, punctuation marks, and numbers
    text = re.sub(r'[^a-zA-Z\s]', ' ', text)

    # Insert spaces between certain patterns (e.g., "ie", "eg")
    text = re.sub(r'(\s)([iI][eE]|[eE][gG])(\s)', r' \2 ', text)

    # Remove extra white spaces
    text = " ".join(text.split())

    return text.lower()
def load_model(path):

    with (open(path, "rb")) as openfile:
        while True:
            try:
                model=pickle.load(openfile)
                return model
            except EOFError:
                print(EOFError)
                break




def remove_stopwords(text):
    stop_words = set(stopwords.words('english'))
    words = text.split()  # Tokenize the text into words
    filtered_words = [word for word in words if word.lower() not in stop_words]  # Filter out stopwords
    return ' '.join(filtered_words)  # Join the words back into a sentence





if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)

    df = pd.read_csv('./dataset/train.csv')
    counts = []
    for i in df['comment_text']:
        counts.append(len(i))

    df['counts'] = counts
    df_cleaned = df[df['counts'] < 400]
    toxic = df_cleaned[df_cleaned['toxic'] == 1]
    nontoxic = df[df['toxic'] == 0][0:len(toxic)]
    df = pd.concat([toxic[0:5000], nontoxic[0:5000]], axis=0)
    df = df.sample(frac=1).reset_index(drop=True)

    df['Cleaned_Comments'] = df['comment_text'].apply(clean_text)
    df['Cleaned_Comments'] = df['Cleaned_Comments'].apply(remove_stopwords)

    X = pd.DataFrame(df['Cleaned_Comments'])
    Y = df.drop(['comment_text', 'Cleaned_Comments'], axis=1)
    X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.3, random_state=42)

    word_vectorizer = TfidfVectorizer(max_features=10000)
    word_vectorizer.fit(X['Cleaned_Comments'])
    train_word_features = word_vectorizer.transform(X_train['Cleaned_Comments'])
    df_comment_tf_idf_train = pd.DataFrame(train_word_features.toarray(),
                                           columns=word_vectorizer.get_feature_names_out())


    print(df_comment_tf_idf_train)

    model_toxic =load_model('./models/model_XGBoot_toxic.pkl')
    model_severe_toxic = load_model('./models/model_XGBoot_severe_toxic.pkl')
    model_insult =load_model('./models/model_XGBoot_insult.pkl')
    model_threat = load_model('./models/model_XGBoot_threat.pkl')
    model_obscene = load_model('./models/model_XGBoot_obscene.pkl')
    model_identity_hate = load_model('./models/model_XGBoot_identity_hate.pkl')

    prediedted=[]
    commet=[]


    # coment_tran = word_vectorizer.transform(commet)
    #
    # commet_final = pd.DataFrame(coment_tran.toarray(),
    #                                        columns=word_vectorizer.get_feature_names_out())
    # prediedted.append(model_toxic.predict(commet_final)[0])
    # prediedted.append(model_severe_toxic.predict(commet_final)[0])
    # prediedted.append(model_insult.predict(commet_final)[0])
    # prediedted.append(model_threat.predict(commet_final)[0])
    # prediedted.append(model_obscene.predict(commet_final)[0])
    # prediedted.append(model_identity_hate.predict(commet_final)[0])

    print(prediedted)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
